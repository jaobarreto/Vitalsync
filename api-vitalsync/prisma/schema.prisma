generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String          @unique
  gender       String
  weight       Int
  height       Int
  password     String
  birthDate    DateTime
  medicalHistory MedicalHistory?
  healthReport   HealthReport?
  caregivers     Caregiver[]
  measurements   Measurement[]
  dailySummaries DailySummary[]
  alerts         Alert[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  @@map("users")
}

model Measurement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  
  heartRate Int
  timestamp DateTime @default(now())

  dailySummary   DailySummary? @relation("DailyMeasurements", fields: [dailySummaryId], references: [id])
  dailySummaryId String?       @db.ObjectId
  alerts         Alert[]       @relation("MeasurementAlerts")

  @@index([userId, timestamp], name: "heart_rate_index")
  @@map("measurements")
}

model Caregiver {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  name         String
  relationship String
  phone        String
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, name])
  @@map("caregivers")
}

model DailySummary {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @db.ObjectId
  date         DateTime
  avgHeartRate Float
  alertCount   Int         @default(0)

  measurements Measurement[] @relation("DailyMeasurements")

  @@unique(fields: [userId, date], name: "userId_date")
  @@map("daily_summaries")
}

model Alert {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  measurement   Measurement? @relation("MeasurementAlerts", fields: [measurementId], references: [id])
  measurementId String?      @db.ObjectId

  type      AlertType
  message   String
  resolved  Boolean   @default(false)
  createdAt DateTime  @default(now())

  @@map("alerts")
}

type MedicalHistory {
  hypertension    Boolean @default(false)
  diabetesType    String?
  highCholesterol Boolean @default(false)
  previousStroke  Boolean @default(false)
}

type HealthReport {
  symptoms  Symptoms
  lifestyle Lifestyle
}

type Symptoms {
  headache           String?
  dizzinessVertigo   String?
  fatigueWeakness    String?
  visualChanges      String?
  numbnessTingling   String?
  speechDifficulties String?
  additionalSymptoms String?
}

type Lifestyle {
  dietType           String?
  alcoholConsumption String?
  stressLevel        String?
  weeklyWorkHours    String?
  dailyScreenTime    String?
  dailyOutdoorTime   String?
  additionalInfo     String?
}

enum AlertType {
  PRECAUTION
  CRITICAL
}
