generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String            @unique
  password        String
  birthDate       DateTime
  gender          String
  weight          Float
  height          Float
  medicalHistory  MedicalHistory?
  healthReport    HealthReport?
  caregivers      Caregiver[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relacionamentos
  measurements    Measurement[]
  dailySummaries  DailySummary[]
  alerts          Alert[]
}

model Measurement {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  userId            String     @db.ObjectId
  heartRate         Int
  bloodOxygenLevel  Int
  hrv               Int
  timestamp         DateTime
  eventType         String?    @default("routine") // "emergency" | "manual" | "automatic"
  notes             String?
  duration          Int?       // Em minutos
  createdAt         DateTime   @default(now())

  // Relacionamento reverso (1 measurement pode ter v√°rios dailySummaries)
  dailySummaryId    String?    @db.ObjectId
  dailySummary      DailySummary? @relation(fields: [dailySummaryId], references: [id])

  alerts            Alert[]

  @@index([userId, timestamp], name: "calendar_query_index")
  @@index([eventType], name: "event_type_index")
}

model DailySummary {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  date         DateTime
  avgHeartRate Float
  minOxygen    Int
  maxHRV       Int
  alertCount   Int        @default(0)

  measurements Measurement[]

  @@index([userId, date], name: "daily_summary_index")
}

model Alert {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId

  measurementId  String?      @db.ObjectId
  measurement    Measurement? @relation(fields: [measurementId], references: [id])

  type           AlertType
  message        String
  resolved       Boolean      @default(false)
  createdAt      DateTime     @default(now())
}

type MedicalHistory {
  hypertension      Boolean @default(false)
  diabetesType      String?  // Ex: "Tipo 1", "Tipo 2", "Gestacional", etc
  highCholesterol   Boolean @default(false)
  previousStroke    Boolean @default(false)
}

type HealthReport {
  symptoms   Symptoms
  lifestyle  Lifestyle
}

type Symptoms {
  headache             String?
  dizzinessVertigo     String?
  fatigueWeakness      String?
  visualChanges        String?
  numbnessTingling     String?
  speechDifficulties   String?
  additionalSymptoms   String?
}

type Lifestyle {
  dietType             String?
  alcoholConsumption   String?
  stressLevel          String?
  weeklyWorkHours      String?
  dailyScreenTime      String?
  dailyOutdoorTime     String?
  additionalInfo       String?
}

type Caregiver {
  name         String
  relationship String  // Ex: "Pai", "Cuidador", "Filho", etc
  phone        String
  email        String?
}

enum AlertType {
  PRECAUTION
  CRITICAL
}
